<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数 -->
<configuration status="WARN" monitorInterval="30">
    <Properties>
        <!-- 日志默认存放的位置,这里设置为项目根路径下,也可指定绝对路径 -->
        <!-- ${web:rootDir}是web项目根路径,java项目没有这个变量,需要删掉,否则会报异常 -->
        <property name="basePath">D:/app/scene-report-pre</property>
        <!-- <property name="basePath">d:/qfxSpringMVCMybaitsDemoLogs</property> -->

    </Properties>

    <!--定义appender -->
    <appenders>
        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--             控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--             这个都知道是输出日志的格式 -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>
        <!-- 打印root中指定的level级别以上的日志到文件 日志日期格式必须是MM-dd-yyyy才可以自动删除过期文件-->
        <RollingFile name="RollingFile" fileName="${basePath}/logs/scene-report-pre.log"
                     filePattern="${basePath}/logs/logbak/scene-report-pre-%d{MM-dd-yyyy}-%i.log.gz">
            <!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%-5level] %C.%M - %m%n"/>
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <!--<OnStartupTriggeringPolicy />-->
                <!-- 文件大小达到1GB进行一次rollover -->
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <!-- TimeBasedTriggeringPolicy是最多用到的Policy，interval默认值是1，根据filePattern中日期的最小单位，例如
                在该配置里是mm（分钟），设置interval="2"则每隔两分钟将发生一次rollover，按当前配置，具体表现就是隔两分钟得到一个log.zip。
                modulate就是让第一次rollover发生在区间边界上（即便还没到interval的时长），按照当前配置，首次rollover会发生在比如
                8点50分0秒，这样之后的rollover就是8点52分0秒、8点54分0秒..这样做的好处在于rollover的时机就变得很有规律很好预测，生成的
                文件还很整齐（假设时间最小单位为天，interval="1"，那么就变成稳定每天0点自动rollover了。。）。还有个属性叫maxRandomDelay，
                防止很多应用在同一时间一起rollover的，暂时不理它。
                -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!--
            DefaultRolloverStrategy，默认rollover策略。参数：fileIndex有两个值，max和min，就是决定生成文件是从序号大的到
            序号小的，还是从序号小的到序号大。min，计数器的起始值，默认是1；max，计数器的最大值，默认是7。还有两个参数暂时不管。
            -->
            <DefaultRolloverStrategy max="64">
                <Delete basePath="${basePath}/logs/" maxDepth="2">
                    <IfFileName glob="*.log.gz"/>
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <!--<IfLastModified age="7d" />-->
                    <!--0.5个月-->
                    <IfLastModified age="2d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <RollingFile name="TRACE_LOG" fileName="${basePath}/logs/scene-report-pre-trace.log"
                     filePattern="${basePath}/logs/logbak/scene-report-pre-trace-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout pattern="%m%n"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="1 GB"/>
            </Policies>
            <DefaultRolloverStrategy max="64">
                <Delete basePath="${basePath}/logs/" maxDepth="2">
                    <IfFileName glob="*.log.gz"/>
                    <IfLastModified age="2d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </appenders>
    <!--然后定义logger,只有定义了logger并引入的appender,appender才会生效 -->
    <loggers>
        <logger name="logTraceAppender" additivity="FALSE" level="ALL">
            <appender-ref ref="TRACE_LOG" level="ALL"/>
        </logger>
        <!--log4j2 自带过滤日志-->
        <Logger name="org.apache.catalina.startup.DigesterFactory" level="error"/>
        <Logger name="org.apache.catalina.util.LifecycleBase" level="error"/>
        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn"/>
        <Logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn"/>
        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error"/>
        <Logger name="org.hibernate.validator.internal.util.Version" level="warn"/>
        <Logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>

        <!--建立一个默认的root的logger -->
        <root level="info">
            <appender-ref ref="Console"/>
            <!--            <appender-ref ref="RollingFile"/>-->
        </root>
    </loggers>
</configuration>